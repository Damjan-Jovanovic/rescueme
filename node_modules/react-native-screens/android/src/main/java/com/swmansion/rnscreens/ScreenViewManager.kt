package com.swmansion.rnscreens

<<<<<<< HEAD
import androidx.annotation.NonNull
import androidx.annotation.Nullable
import com.facebook.react.bridge.JSApplicationIllegalArgumentException
import com.facebook.react.common.MapBuilder
import com.facebook.react.module.annotations.ReactModule
import com.facebook.react.uimanager.ReactStylesDiffMap
import com.facebook.react.uimanager.StateWrapper
import com.facebook.react.uimanager.ThemedReactContext
import com.facebook.react.uimanager.ViewGroupManager
import com.facebook.react.uimanager.ViewManagerDelegate
import com.facebook.react.uimanager.annotations.ReactProp
import com.facebook.react.viewmanagers.RNSScreenManagerDelegate
import com.facebook.react.viewmanagers.RNSScreenManagerInterface
=======
import com.facebook.react.bridge.JSApplicationIllegalArgumentException
import com.facebook.react.common.MapBuilder
import com.facebook.react.module.annotations.ReactModule
import com.facebook.react.uimanager.ThemedReactContext
import com.facebook.react.uimanager.ViewGroupManager
import com.facebook.react.uimanager.annotations.ReactProp
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
import com.swmansion.rnscreens.events.HeaderBackButtonClickedEvent
import com.swmansion.rnscreens.events.ScreenAppearEvent
import com.swmansion.rnscreens.events.ScreenDisappearEvent
import com.swmansion.rnscreens.events.ScreenDismissedEvent
import com.swmansion.rnscreens.events.ScreenTransitionProgressEvent
import com.swmansion.rnscreens.events.ScreenWillAppearEvent
import com.swmansion.rnscreens.events.ScreenWillDisappearEvent
import com.swmansion.rnscreens.events.StackFinishTransitioningEvent

@ReactModule(name = ScreenViewManager.REACT_CLASS)
<<<<<<< HEAD
class ScreenViewManager : ViewGroupManager<Screen>(), RNSScreenManagerInterface<Screen> {
    private val mDelegate: ViewManagerDelegate<Screen>

    init {
        mDelegate = RNSScreenManagerDelegate<Screen, ScreenViewManager>(this)
    }

=======
class ScreenViewManager : ViewGroupManager<Screen>() {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
    override fun getName(): String {
        return REACT_CLASS
    }

    override fun createViewInstance(reactContext: ThemedReactContext): Screen {
        return Screen(reactContext)
    }

    @ReactProp(name = "activityState")
<<<<<<< HEAD
    override fun setActivityState(view: Screen, activityState: Int) {
        if (activityState == -1) {
=======
    fun setActivityState(view: Screen, activityState: Int?) {
        if (activityState == null) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
            // Null will be provided when activityState is set as an animated value and we change
            // it from JS to be a plain value (non animated).
            // In case when null is received, we want to ignore such value and not make
            // any updates as the actual non-null value will follow immediately.
            return
        }
        when (activityState) {
            0 -> view.setActivityState(Screen.ActivityState.INACTIVE)
            1 -> view.setActivityState(Screen.ActivityState.TRANSITIONING_OR_BELOW_TOP)
            2 -> view.setActivityState(Screen.ActivityState.ON_TOP)
        }
    }

    @ReactProp(name = "stackPresentation")
<<<<<<< HEAD
    override fun setStackPresentation(view: Screen, presentation: String?) {
=======
    fun setStackPresentation(view: Screen, presentation: String) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.stackPresentation = when (presentation) {
            "push" -> Screen.StackPresentation.PUSH
            "modal", "containedModal", "fullScreenModal", "formSheet" ->
                Screen.StackPresentation.MODAL
            "transparentModal", "containedTransparentModal" ->
                Screen.StackPresentation.TRANSPARENT_MODAL
            else -> throw JSApplicationIllegalArgumentException("Unknown presentation type $presentation")
        }
    }

    @ReactProp(name = "stackAnimation")
<<<<<<< HEAD
    override fun setStackAnimation(view: Screen, animation: String?) {
=======
    fun setStackAnimation(view: Screen, animation: String?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.stackAnimation = when (animation) {
            null, "default", "flip", "simple_push" -> Screen.StackAnimation.DEFAULT
            "none" -> Screen.StackAnimation.NONE
            "fade" -> Screen.StackAnimation.FADE
            "slide_from_right" -> Screen.StackAnimation.SLIDE_FROM_RIGHT
            "slide_from_left" -> Screen.StackAnimation.SLIDE_FROM_LEFT
            "slide_from_bottom" -> Screen.StackAnimation.SLIDE_FROM_BOTTOM
            "fade_from_bottom" -> Screen.StackAnimation.FADE_FROM_BOTTOM
            else -> throw JSApplicationIllegalArgumentException("Unknown animation type $animation")
        }
    }

    @ReactProp(name = "gestureEnabled", defaultBoolean = true)
<<<<<<< HEAD
    override fun setGestureEnabled(view: Screen, gestureEnabled: Boolean) {
=======
    fun setGestureEnabled(view: Screen, gestureEnabled: Boolean) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.isGestureEnabled = gestureEnabled
    }

    @ReactProp(name = "replaceAnimation")
<<<<<<< HEAD
    override fun setReplaceAnimation(view: Screen, animation: String?) {
=======
    fun setReplaceAnimation(view: Screen, animation: String?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.replaceAnimation = when (animation) {
            null, "pop" -> Screen.ReplaceAnimation.POP
            "push" -> Screen.ReplaceAnimation.PUSH
            else -> throw JSApplicationIllegalArgumentException("Unknown replace animation type $animation")
        }
    }

    @ReactProp(name = "screenOrientation")
<<<<<<< HEAD
    override fun setScreenOrientation(view: Screen, screenOrientation: String?) {
=======
    fun setScreenOrientation(view: Screen, screenOrientation: String?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.setScreenOrientation(screenOrientation)
    }

    @ReactProp(name = "statusBarAnimation")
<<<<<<< HEAD
    override fun setStatusBarAnimation(view: Screen, statusBarAnimation: String?) {
=======
    fun setStatusBarAnimation(view: Screen, statusBarAnimation: String?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        val animated = statusBarAnimation != null && "none" != statusBarAnimation
        view.isStatusBarAnimated = animated
    }

    @ReactProp(name = "statusBarColor")
<<<<<<< HEAD
    override fun setStatusBarColor(view: Screen, statusBarColor: Int?) {
=======
    fun setStatusBarColor(view: Screen, statusBarColor: Int?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.statusBarColor = statusBarColor
    }

    @ReactProp(name = "statusBarStyle")
<<<<<<< HEAD
    override fun setStatusBarStyle(view: Screen, statusBarStyle: String?) {
=======
    fun setStatusBarStyle(view: Screen, statusBarStyle: String?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.statusBarStyle = statusBarStyle
    }

    @ReactProp(name = "statusBarTranslucent")
<<<<<<< HEAD
    override fun setStatusBarTranslucent(view: Screen, statusBarTranslucent: Boolean) {
=======
    fun setStatusBarTranslucent(view: Screen, statusBarTranslucent: Boolean?) {
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view.isStatusBarTranslucent = statusBarTranslucent
    }

    @ReactProp(name = "statusBarHidden")
<<<<<<< HEAD
    override fun setStatusBarHidden(view: Screen, statusBarHidden: Boolean) {
        view.isStatusBarHidden = statusBarHidden
    }

    @ReactProp(name = "navigationBarColor", customType = "Color")
    override fun setNavigationBarColor(view: Screen, navigationBarColor: Int?) {
        view.navigationBarColor = navigationBarColor
    }

    @ReactProp(name = "navigationBarHidden")
    override fun setNavigationBarHidden(view: Screen, navigationBarHidden: Boolean) {
        view.isNavigationBarHidden = navigationBarHidden
    }

    @ReactProp(name = "nativeBackButtonDismissalEnabled")
    override fun setNativeBackButtonDismissalEnabled(
=======
    fun setStatusBarHidden(view: Screen, statusBarHidden: Boolean?) {
        view.isStatusBarHidden = statusBarHidden
    }

    @ReactProp(name = "nativeBackButtonDismissalEnabled")
    fun setNativeBackButtonDismissalEnabled(
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
        view: Screen,
        nativeBackButtonDismissalEnabled: Boolean
    ) {
        view.nativeBackButtonDismissalEnabled = nativeBackButtonDismissalEnabled
    }

    override fun getExportedCustomDirectEventTypeConstants(): MutableMap<String, Any> {
        val map: MutableMap<String, Any> = MapBuilder.of(
            ScreenDismissedEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onDismissed"),
            ScreenWillAppearEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onWillAppear"),
            ScreenAppearEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onAppear"),
            ScreenWillDisappearEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onWillDisappear"),
            ScreenDisappearEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onDisappear"),
            StackFinishTransitioningEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onFinishTransitioning"),
            ScreenTransitionProgressEvent.EVENT_NAME,
            MapBuilder.of("registrationName", "onTransitionProgress")
        )
        // there is no `MapBuilder.of` with more than 7 items
        map[HeaderBackButtonClickedEvent.EVENT_NAME] = MapBuilder.of("registrationName", "onHeaderBackButtonClicked")
        return map
    }

<<<<<<< HEAD
    protected override fun getDelegate(): ViewManagerDelegate<Screen> {
        return mDelegate
    }

=======
>>>>>>> 150527d27ff0a3db86f4b23e3ac848fd48c52064
    companion object {
        const val REACT_CLASS = "RNSScreen"
    }
}
