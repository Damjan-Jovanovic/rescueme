{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport * as Contacts from 'expo-contacts';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport * as SMS from 'expo-sms';\nimport { TextInput } from 'react-native-gesture-handler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      contacts = _useState2[0],\n      setContacts = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Contacts$reque, status, _await$Contacts$getCo, data;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Contacts.requestPermissionsAsync());\n\n            case 2:\n              _await$Contacts$reque = _context.sent;\n              status = _await$Contacts$reque.status;\n\n              if (!(status === 'granted')) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Contacts.getContactsAsync({\n                fields: [Contacts.Fields.PhoneNumbers]\n              }));\n\n            case 7:\n              _await$Contacts$getCo = _context.sent;\n              data = _await$Contacts$getCo.data;\n\n              if (data.length > 0) {\n                setContacts(data);\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(TextInput, {\n      placeholder: \"Search\",\n      placeholderTextColor: \"#dddddd\",\n      style: {\n        paddingTop: 10,\n        backgroundColor: '#2f363c',\n        height: 50,\n        fontSize: 20,\n        padding: 15,\n        color: 'white',\n        borderBottomWidth: 0.5,\n        borderBottomColor: '#7d90a0'\n      },\n      onChangeText: function onChangeText(value) {\n        return _this.searchContacts(value);\n      }\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsx(FlatList, {\n        data: contacts,\n        keyExtractor: function keyExtractor(item) {\n          return item.id.toString();\n        },\n        initialNumToRender: Array.length,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsx(View, {\n            style: styles.row,\n            children: _jsxs(TouchableOpacity, {\n              onPress: function onPress() {\n                return SMS.sendSMSAsync(item.phoneNumbers[0].number, 'Télécharge RescueMe');\n              },\n              children: [_jsx(Text, {\n                style: styles.contactName,\n                children: item.name\n              }), _jsxs(Text, {\n                style: styles.contactum,\n                children: [\" \", item.phoneNumbers && item.phoneNumbers[0] && item.phoneNumbers[0].digits]\n              })]\n            })\n          });\n        }\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  contactum: {\n    fontSize: 15\n  },\n  contactName: {\n    fontSize: 20,\n    lineHeight: 40\n  },\n  row: {\n    flex: 1,\n    paddingVertical: 25,\n    paddingHorizontal: 50,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottomWidth: 1,\n    borderBottomColor: 'gray'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Damja/Documents/GitHub/rescueme/src/screens/InviteContactScreen.js"],"names":["React","useEffect","useState","Contacts","SMS","TextInput","App","contacts","setContacts","requestPermissionsAsync","status","getContactsAsync","fields","Fields","PhoneNumbers","data","length","flex","paddingTop","backgroundColor","height","fontSize","padding","color","borderBottomWidth","borderBottomColor","value","searchContacts","styles","container","item","id","toString","Array","row","sendSMSAsync","phoneNumbers","number","contactName","name","contactum","digits","StyleSheet","create","lineHeight","paddingVertical","paddingHorizontal","flexDirection","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport * as Contacts from 'expo-contacts';\r\nimport { StyleSheet, View, Text, FlatList,TouchableOpacity, SafeAreaView } from 'react-native'\r\nimport * as SMS from 'expo-sms';\r\nimport { TextInput } from 'react-native-gesture-handler';\r\n\r\n\r\n\r\nexport default function App() {\r\n\r\n  const [contacts, setContacts ] = useState([])\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Contacts.requestPermissionsAsync();\r\n      \r\n      if (status === 'granted') {\r\n        const { data } = await Contacts.getContactsAsync({\r\n          fields: [Contacts.Fields.PhoneNumbers],\r\n        });\r\n \r\n        if (data.length > 0) {\r\n          setContacts(data)\r\n        }        \r\n      }\r\n\r\n    })();\r\n  }, []);\r\n\r\n /* searchContacts = value => {\r\n    const filteredContacts = this.state.inMemoryContacts.filter(contact => {\r\n      let contactLowercase = (\r\n        contact.firstName +\r\n        ' ' +\r\n        contact.lastName\r\n      ).toLowerCase();\r\n\r\n      let searchTermLowercase = value.toLowerCase();\r\n\r\n      return contactLowercase.indexOf(searchTermLowercase) > -1;\r\n    });\r\n    this.setState({ contacts: filteredContacts });\r\n  };*/\r\n\r\n\r\n\r\n  return (\r\n\r\n    <View style={{flex:1}}>\r\n        <TextInput\r\n          placeholder=\"Search\"\r\n          placeholderTextColor=\"#dddddd\"\r\n          style={{\r\n            paddingTop: 10,\r\n            backgroundColor: '#2f363c',\r\n            height: 50,\r\n            fontSize: 20,\r\n            padding: 15,\r\n            color: 'white',\r\n            borderBottomWidth: 0.5,\r\n            borderBottomColor: '#7d90a0'\r\n          }}\r\n          onChangeText={value => this.searchContacts(value)}\r\n        />\r\n    \r\n\r\n      <View style={styles.container}>\r\n        <FlatList\r\n        /*style={{width: '80%'}}*/\r\n          data={contacts}\r\n          keyExtractor={(item) => item.id.toString()} \r\n          \r\n          \r\n          initialNumToRender={Array.length}\r\n          renderItem={({item}) => {\r\n            return (\r\n\r\n              <View style={styles.row}>\r\n                <TouchableOpacity onPress={() => SMS.sendSMSAsync(\r\n                    item.phoneNumbers[0].number,\r\n                    'Télécharge RescueMe'\r\n                  )}>\r\n                  <Text style={styles.contactName}>{item.name}</Text>\r\n                    <Text  style={styles.contactum}> {item.phoneNumbers && item.phoneNumbers[0] && item.phoneNumbers[0].digits}</Text>\r\n                  </TouchableOpacity>\r\n            </View>\r\n            )\r\n          }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  contactum:{\r\n    fontSize: 15,\r\n    \r\n  },\r\n  contactName:{\r\n    fontSize: 20,\r\n    lineHeight: 40\r\n  },\r\n  row:{\r\n    flex:1,\r\n    paddingVertical:25,\r\n    paddingHorizontal:50,\r\n    flexDirection:'row',\r\n    justifyContent: 'space-between',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: 'gray',\r\n  \r\n  },\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}