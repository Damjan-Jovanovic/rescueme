{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport SwipeThumb from \"../../components/SwipeThumb\";\nimport styles from \"./styles\";\nimport { DISABLED_RAIL_BACKGROUND_COLOR, DISABLED_THUMB_ICON_BACKGROUND_COLOR, DISABLED_THUMB_ICON_BORDER_COLOR, RAIL_BACKGROUND_COLOR, RAIL_BORDER_COLOR, RAIL_FILL_BACKGROUND_COLOR, RAIL_FILL_BORDER_COLOR, SWIPE_SUCCESS_THRESHOLD, THUMB_ICON_BACKGROUND_COLOR, THUMB_ICON_BORDER_COLOR, TITLE_COLOR } from \"../../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SwipeButton = function SwipeButton(props) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      layoutWidth = _useState2[0],\n      setLayoutWidth = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      screenReaderEnabled = _useState4[0],\n      setScreenReaderEnabled = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isUnmounting = _useState6[0],\n      setIsUnmounting = _useState6[1];\n\n  var onLayoutContainer = function onLayoutContainer(e) {\n    return _regeneratorRuntime.async(function onLayoutContainer$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(isUnmounting || layoutWidth)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            setLayoutWidth(e.nativeEvent.layout.width);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    var handleScreenReaderToggled = function handleScreenReaderToggled(isEnabled) {\n      if (isUnmounting || screenReaderEnabled === isEnabled) {\n        return;\n      }\n\n      setScreenReaderEnabled(isEnabled);\n    };\n\n    setIsUnmounting(false);\n    AccessibilityInfo.addEventListener('change', handleScreenReaderToggled);\n    AccessibilityInfo.isScreenReaderEnabled().then(function (isEnabled) {\n      if (isUnmounting) {\n        return;\n      }\n\n      setScreenReaderEnabled(isEnabled);\n    });\n    return function () {\n      setIsUnmounting(true);\n      AccessibilityInfo.removeEventListener('change', handleScreenReaderToggled);\n    };\n  }, [isUnmounting, screenReaderEnabled]);\n  var containerStyles = props.containerStyles,\n      disabled = props.disabled,\n      disabledRailBackgroundColor = props.disabledRailBackgroundColor,\n      disabledThumbIconBackgroundColor = props.disabledThumbIconBackgroundColor,\n      disabledThumbIconBorderColor = props.disabledThumbIconBorderColor,\n      disableResetOnTap = props.disableResetOnTap,\n      enableReverseSwipe = props.enableReverseSwipe,\n      forceReset = props.forceReset,\n      height = props.height,\n      onSwipeFail = props.onSwipeFail,\n      onSwipeStart = props.onSwipeStart,\n      onSwipeSuccess = props.onSwipeSuccess,\n      railBackgroundColor = props.railBackgroundColor,\n      railBorderColor = props.railBorderColor,\n      railFillBackgroundColor = props.railFillBackgroundColor,\n      railFillBorderColor = props.railFillBorderColor,\n      railStyles = props.railStyles,\n      resetAfterSuccessAnimDelay = props.resetAfterSuccessAnimDelay,\n      resetAfterSuccessAnimDuration = props.resetAfterSuccessAnimDuration,\n      shouldResetAfterSuccess = props.shouldResetAfterSuccess,\n      swipeSuccessThreshold = props.swipeSuccessThreshold,\n      thumbIconBackgroundColor = props.thumbIconBackgroundColor,\n      thumbIconBorderColor = props.thumbIconBorderColor,\n      thumbIconComponent = props.thumbIconComponent,\n      thumbIconImageSource = props.thumbIconImageSource,\n      thumbIconStyles = props.thumbIconStyles,\n      thumbIconWidth = props.thumbIconWidth,\n      title = props.title,\n      titleColor = props.titleColor,\n      titleFontSize = props.titleFontSize,\n      titleMaxFontScale = props.titleMaxFontScale,\n      titleStyles = props.titleStyles,\n      width = props.width;\n  return _jsxs(View, {\n    style: [styles.container, _objectSpread(_objectSpread({}, containerStyles), {}, {\n      backgroundColor: disabled ? disabledRailBackgroundColor : railBackgroundColor,\n      borderColor: railBorderColor\n    }, width ? {\n      width: width\n    } : {})],\n    onLayout: onLayoutContainer,\n    children: [_jsx(Text, {\n      maxFontSizeMultiplier: titleMaxFontScale,\n      ellipsizeMode: 'tail',\n      numberOfLines: 1,\n      importantForAccessibility: screenReaderEnabled ? 'no-hide-descendants' : '',\n      style: [styles.title, _objectSpread({\n        color: titleColor,\n        fontSize: titleFontSize\n      }, titleStyles)],\n      children: title\n    }), layoutWidth > 0 && _jsx(SwipeThumb, {\n      disabled: disabled,\n      disabledThumbIconBackgroundColor: disabledThumbIconBackgroundColor,\n      disabledThumbIconBorderColor: disabledThumbIconBorderColor,\n      disableResetOnTap: disableResetOnTap,\n      enableReverseSwipe: enableReverseSwipe,\n      forceReset: forceReset,\n      layoutWidth: layoutWidth,\n      onSwipeFail: onSwipeFail,\n      onSwipeStart: onSwipeStart,\n      onSwipeSuccess: onSwipeSuccess,\n      railFillBackgroundColor: railFillBackgroundColor,\n      railFillBorderColor: railFillBorderColor,\n      railStyles: railStyles,\n      resetAfterSuccessAnimDelay: resetAfterSuccessAnimDelay,\n      resetAfterSuccessAnimDuration: resetAfterSuccessAnimDuration,\n      screenReaderEnabled: screenReaderEnabled,\n      shouldResetAfterSuccess: shouldResetAfterSuccess,\n      swipeSuccessThreshold: swipeSuccessThreshold,\n      thumbIconBackgroundColor: thumbIconBackgroundColor,\n      thumbIconBorderColor: thumbIconBorderColor,\n      thumbIconComponent: thumbIconComponent,\n      thumbIconHeight: height,\n      thumbIconImageSource: thumbIconImageSource,\n      thumbIconStyles: thumbIconStyles,\n      thumbIconWidth: thumbIconWidth,\n      title: title\n    })]\n  });\n};\n\nSwipeButton.defaultProps = {\n  containerStyles: {},\n  disabled: false,\n  disabledRailBackgroundColor: DISABLED_RAIL_BACKGROUND_COLOR,\n  disabledThumbIconBackgroundColor: DISABLED_THUMB_ICON_BACKGROUND_COLOR,\n  disabledThumbIconBorderColor: DISABLED_THUMB_ICON_BORDER_COLOR,\n  disableResetOnTap: false,\n  height: 50,\n  railBackgroundColor: RAIL_BACKGROUND_COLOR,\n  railBorderColor: RAIL_BORDER_COLOR,\n  railFillBackgroundColor: RAIL_FILL_BACKGROUND_COLOR,\n  railFillBorderColor: RAIL_FILL_BORDER_COLOR,\n  swipeSuccessThreshold: SWIPE_SUCCESS_THRESHOLD,\n  thumbIconBackgroundColor: THUMB_ICON_BACKGROUND_COLOR,\n  thumbIconBorderColor: THUMB_ICON_BORDER_COLOR,\n  thumbIconStyles: {},\n  title: 'Swipe to submit',\n  titleColor: TITLE_COLOR,\n  titleFontSize: 20,\n  titleStyles: {}\n};\nSwipeButton.propTypes = {\n  containerStyles: PropTypes.object,\n  disable: PropTypes.bool,\n  disabledRailBackgroundColor: PropTypes.string,\n  disabledThumbIconBackgroundColor: PropTypes.string,\n  disabledThumbIconBorderColor: PropTypes.string,\n  disableResetOnTap: PropTypes.bool,\n  enableReverseSwipe: PropTypes.bool,\n  forceReset: PropTypes.func,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onSwipeFail: PropTypes.func,\n  onSwipeStart: PropTypes.func,\n  onSwipeSuccess: PropTypes.func,\n  railBackgroundColor: PropTypes.string,\n  railBorderColor: PropTypes.string,\n  railFillBackgroundColor: PropTypes.string,\n  railFillBorderColor: PropTypes.string,\n  railStyles: PropTypes.object,\n  resetAfterSuccessAnimDelay: PropTypes.number,\n  resetAfterSuccessAnimDuration: PropTypes.number,\n  shouldResetAfterSuccess: PropTypes.bool,\n  swipeSuccessThreshold: PropTypes.number,\n  thumbIconBackgroundColor: PropTypes.string,\n  thumbIconBorderColor: PropTypes.string,\n  thumbIconComponent: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),\n  thumbIconImageSource: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  thumbIconStyles: PropTypes.object,\n  thumbIconWidth: PropTypes.number,\n  title: PropTypes.string,\n  titleColor: PropTypes.string,\n  titleFontSize: PropTypes.number,\n  titleMaxFontScale: PropTypes.number,\n  titleStyles: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nexport default SwipeButton;","map":{"version":3,"sources":["C:/Users/Damja/Documents/GitHub/rescueme/node_modules/rn-swipe-button/src/components/SwipeButton/index.js"],"names":["React","useState","useEffect","PropTypes","SwipeThumb","styles","DISABLED_RAIL_BACKGROUND_COLOR","DISABLED_THUMB_ICON_BACKGROUND_COLOR","DISABLED_THUMB_ICON_BORDER_COLOR","RAIL_BACKGROUND_COLOR","RAIL_BORDER_COLOR","RAIL_FILL_BACKGROUND_COLOR","RAIL_FILL_BORDER_COLOR","SWIPE_SUCCESS_THRESHOLD","THUMB_ICON_BACKGROUND_COLOR","THUMB_ICON_BORDER_COLOR","TITLE_COLOR","SwipeButton","props","layoutWidth","setLayoutWidth","screenReaderEnabled","setScreenReaderEnabled","isUnmounting","setIsUnmounting","onLayoutContainer","e","nativeEvent","layout","width","handleScreenReaderToggled","isEnabled","AccessibilityInfo","addEventListener","isScreenReaderEnabled","then","removeEventListener","containerStyles","disabled","disabledRailBackgroundColor","disabledThumbIconBackgroundColor","disabledThumbIconBorderColor","disableResetOnTap","enableReverseSwipe","forceReset","height","onSwipeFail","onSwipeStart","onSwipeSuccess","railBackgroundColor","railBorderColor","railFillBackgroundColor","railFillBorderColor","railStyles","resetAfterSuccessAnimDelay","resetAfterSuccessAnimDuration","shouldResetAfterSuccess","swipeSuccessThreshold","thumbIconBackgroundColor","thumbIconBorderColor","thumbIconComponent","thumbIconImageSource","thumbIconStyles","thumbIconWidth","title","titleColor","titleFontSize","titleMaxFontScale","titleStyles","container","backgroundColor","borderColor","color","fontSize","defaultProps","propTypes","object","disable","bool","string","func","oneOfType","number","element","node"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, View, AccessibilityInfo } from 'react-native';\r\n\r\n// Components\r\nimport SwipeThumb from '../../components/SwipeThumb';\r\n\r\n// Styles\r\nimport styles from './styles';\r\n\r\n// Constants\r\nimport {\r\n  DISABLED_RAIL_BACKGROUND_COLOR,\r\n  DISABLED_THUMB_ICON_BACKGROUND_COLOR,\r\n  DISABLED_THUMB_ICON_BORDER_COLOR,\r\n  RAIL_BACKGROUND_COLOR,\r\n  RAIL_BORDER_COLOR,\r\n  RAIL_FILL_BACKGROUND_COLOR,\r\n  RAIL_FILL_BORDER_COLOR,\r\n  SWIPE_SUCCESS_THRESHOLD,\r\n  THUMB_ICON_BACKGROUND_COLOR,\r\n  THUMB_ICON_BORDER_COLOR,\r\n  TITLE_COLOR,\r\n} from '../../constants';\r\n\r\nconst SwipeButton = props => {\r\n  const [layoutWidth, setLayoutWidth] = useState(0);\r\n  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);\r\n  const [isUnmounting, setIsUnmounting] = useState(false);\r\n\r\n  /**\r\n   * Retrieve layoutWidth to set maximum swipeable area.\r\n   * Correct layout width will be received only after first render but we need it before render.\r\n   * So render SwipeThumb only if layoutWidth > 0\r\n   */\r\n  const onLayoutContainer = async e => {\r\n    if (isUnmounting || layoutWidth) {\r\n      return;\r\n    }\r\n    setLayoutWidth(e.nativeEvent.layout.width);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleScreenReaderToggled = isEnabled => {\r\n      if (isUnmounting || screenReaderEnabled === isEnabled) {\r\n        return;\r\n      }\r\n      setScreenReaderEnabled(isEnabled);\r\n    };\r\n    setIsUnmounting(false);\r\n    AccessibilityInfo.addEventListener('change', handleScreenReaderToggled);\r\n\r\n    AccessibilityInfo.isScreenReaderEnabled().then(isEnabled => {\r\n      if (isUnmounting) {\r\n        return;\r\n      }\r\n      setScreenReaderEnabled(isEnabled);\r\n    });\r\n\r\n    return () => {\r\n      setIsUnmounting(true);\r\n      AccessibilityInfo.removeEventListener(\r\n        'change',\r\n        handleScreenReaderToggled,\r\n      );\r\n    };\r\n  }, [isUnmounting, screenReaderEnabled]);\r\n\r\n  const {\r\n    containerStyles,\r\n    disabled,\r\n    disabledRailBackgroundColor,\r\n    disabledThumbIconBackgroundColor,\r\n    disabledThumbIconBorderColor,\r\n    disableResetOnTap,\r\n    enableReverseSwipe,\r\n    forceReset,\r\n    height,\r\n    onSwipeFail,\r\n    onSwipeStart,\r\n    onSwipeSuccess,\r\n    railBackgroundColor,\r\n    railBorderColor,\r\n    railFillBackgroundColor,\r\n    railFillBorderColor,\r\n    railStyles,\r\n    resetAfterSuccessAnimDelay,\r\n    resetAfterSuccessAnimDuration,\r\n    shouldResetAfterSuccess,\r\n    swipeSuccessThreshold,\r\n    thumbIconBackgroundColor,\r\n    thumbIconBorderColor,\r\n    thumbIconComponent,\r\n    thumbIconImageSource,\r\n    thumbIconStyles,\r\n    thumbIconWidth,\r\n    title,\r\n    titleColor,\r\n    titleFontSize,\r\n    titleMaxFontScale,\r\n    titleStyles,\r\n    width,\r\n  } = props;\r\n  return (\r\n    <View\r\n      style={[\r\n        styles.container,\r\n        {\r\n          ...containerStyles,\r\n          backgroundColor: disabled\r\n            ? disabledRailBackgroundColor\r\n            : railBackgroundColor,\r\n          borderColor: railBorderColor,\r\n          ...(width ? { width } : {}),\r\n        },\r\n      ]}\r\n      onLayout={onLayoutContainer}>\r\n      <Text\r\n        maxFontSizeMultiplier={titleMaxFontScale} ellipsizeMode={'tail'} numberOfLines={1}\r\n        importantForAccessibility={\r\n          screenReaderEnabled ? 'no-hide-descendants' : ''\r\n        }\r\n        style={[\r\n          styles.title,\r\n          {\r\n            color: titleColor,\r\n            fontSize: titleFontSize,\r\n            ...titleStyles,\r\n          },\r\n        ]}>\r\n        {title}\r\n      </Text>\r\n      {layoutWidth > 0 && (\r\n        <SwipeThumb\r\n          disabled={disabled}\r\n          disabledThumbIconBackgroundColor={disabledThumbIconBackgroundColor}\r\n          disabledThumbIconBorderColor={disabledThumbIconBorderColor}\r\n          disableResetOnTap={disableResetOnTap}\r\n          enableReverseSwipe={enableReverseSwipe}\r\n          forceReset={forceReset}\r\n          layoutWidth={layoutWidth}\r\n          onSwipeFail={onSwipeFail}\r\n          onSwipeStart={onSwipeStart}\r\n          onSwipeSuccess={onSwipeSuccess}\r\n          railFillBackgroundColor={railFillBackgroundColor}\r\n          railFillBorderColor={railFillBorderColor}\r\n          railStyles={railStyles}\r\n          resetAfterSuccessAnimDelay={resetAfterSuccessAnimDelay}\r\n          resetAfterSuccessAnimDuration={resetAfterSuccessAnimDuration}\r\n          screenReaderEnabled={screenReaderEnabled}\r\n          shouldResetAfterSuccess={shouldResetAfterSuccess}\r\n          swipeSuccessThreshold={swipeSuccessThreshold}\r\n          thumbIconBackgroundColor={thumbIconBackgroundColor}\r\n          thumbIconBorderColor={thumbIconBorderColor}\r\n          thumbIconComponent={thumbIconComponent}\r\n          thumbIconHeight={height}\r\n          thumbIconImageSource={thumbIconImageSource}\r\n          thumbIconStyles={thumbIconStyles}\r\n          thumbIconWidth={thumbIconWidth}\r\n          title={title}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nSwipeButton.defaultProps = {\r\n  containerStyles: {},\r\n  disabled: false,\r\n  disabledRailBackgroundColor: DISABLED_RAIL_BACKGROUND_COLOR,\r\n  disabledThumbIconBackgroundColor: DISABLED_THUMB_ICON_BACKGROUND_COLOR,\r\n  disabledThumbIconBorderColor: DISABLED_THUMB_ICON_BORDER_COLOR,\r\n  disableResetOnTap: false,\r\n  height: 50,\r\n  railBackgroundColor: RAIL_BACKGROUND_COLOR,\r\n  railBorderColor: RAIL_BORDER_COLOR,\r\n  railFillBackgroundColor: RAIL_FILL_BACKGROUND_COLOR,\r\n  railFillBorderColor: RAIL_FILL_BORDER_COLOR,\r\n  swipeSuccessThreshold: SWIPE_SUCCESS_THRESHOLD,\r\n  thumbIconBackgroundColor: THUMB_ICON_BACKGROUND_COLOR,\r\n  thumbIconBorderColor: THUMB_ICON_BORDER_COLOR,\r\n  thumbIconStyles: {},\r\n  title: 'Swipe to submit',\r\n  titleColor: TITLE_COLOR,\r\n  titleFontSize: 20,\r\n  titleStyles: {},\r\n};\r\n\r\nSwipeButton.propTypes = {\r\n  containerStyles: PropTypes.object,\r\n  disable: PropTypes.bool,\r\n  disabledRailBackgroundColor: PropTypes.string,\r\n  disabledThumbIconBackgroundColor: PropTypes.string,\r\n  disabledThumbIconBorderColor: PropTypes.string,\r\n  disableResetOnTap: PropTypes.bool,\r\n  enableReverseSwipe: PropTypes.bool,\r\n  forceReset: PropTypes.func,\r\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  onSwipeFail: PropTypes.func,\r\n  onSwipeStart: PropTypes.func,\r\n  onSwipeSuccess: PropTypes.func,\r\n  railBackgroundColor: PropTypes.string,\r\n  railBorderColor: PropTypes.string,\r\n  railFillBackgroundColor: PropTypes.string,\r\n  railFillBorderColor: PropTypes.string,\r\n  railStyles: PropTypes.object,\r\n  resetAfterSuccessAnimDelay: PropTypes.number,\r\n  resetAfterSuccessAnimDuration: PropTypes.number,\r\n  shouldResetAfterSuccess: PropTypes.bool,\r\n  swipeSuccessThreshold: PropTypes.number, // Ex: 70. Swipping 70% will be considered as successful swipe\r\n  thumbIconBackgroundColor: PropTypes.string,\r\n  thumbIconBorderColor: PropTypes.string,\r\n  thumbIconComponent: PropTypes.oneOfType([\r\n    PropTypes.element,\r\n    PropTypes.node,\r\n    PropTypes.func,\r\n  ]),\r\n  thumbIconImageSource: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]),\r\n  thumbIconStyles: PropTypes.object,\r\n  thumbIconWidth: PropTypes.number,\r\n  title: PropTypes.string,\r\n  titleColor: PropTypes.string,\r\n  titleFontSize: PropTypes.number,\r\n  titleMaxFontScale: PropTypes.number,\r\n  titleStyles: PropTypes.object,\r\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n};\r\n\r\nexport default SwipeButton;\r\n"]},"metadata":{},"sourceType":"module"}