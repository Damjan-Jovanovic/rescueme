{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles, { borderWidth, margin } from \"./styles\";\nimport { TRANSPARENT_COLOR } from \"../../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar DEFAULT_ANIMATION_DURATION = 400;\nvar RESET_AFTER_SUCCESS_DEFAULT_DELAY = 1000;\n\nvar SwipeThumb = function SwipeThumb(props) {\n  var paddingAndMarginsOffset = borderWidth + 2 * margin;\n  var defaultContainerWidth = 0;\n\n  if (props.thumbIconWidth == undefined) {\n    defaultContainerWidth = props.thumbIconHeight;\n  } else {\n    defaultContainerWidth = props.thumbIconWidth;\n  }\n\n  var forceReset = props.forceReset;\n  var maxWidth = props.layoutWidth - paddingAndMarginsOffset;\n  var isRTL = I18nManager.isRTL;\n  var animatedWidth = useRef(new Animated.Value(defaultContainerWidth)).current;\n\n  var _useState = useState(defaultContainerWidth),\n      _useState2 = _slicedToArray(_useState, 2),\n      defaultWidth = _useState2[0],\n      setDefaultWidth = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldDisableTouch = _useState4[0],\n      disableTouch = _useState4[1];\n\n  var _useState5 = useState(TRANSPARENT_COLOR),\n      _useState6 = _slicedToArray(_useState5, 2),\n      backgroundColor = _useState6[0],\n      setBackgroundColor = _useState6[1];\n\n  var _useState7 = useState(TRANSPARENT_COLOR),\n      _useState8 = _slicedToArray(_useState7, 2),\n      borderColor = _useState8[0],\n      setBorderColor = _useState8[1];\n\n  var panResponder = useCallback(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n      return true;\n    },\n    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n      return true;\n    },\n    onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {\n      return true;\n    },\n    onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n      return true;\n    },\n    onPanResponderStart: onPanResponderStart,\n    onPanResponderMove: onPanResponderMove,\n    onPanResponderRelease: onPanResponderRelease\n  }), [props]);\n  useEffect(function () {\n    Animated.timing(animatedWidth, {\n      toValue: defaultWidth,\n      duration: 400,\n      useNativeDriver: false\n    }).start();\n  }, [animatedWidth, defaultWidth]);\n  useEffect(function () {\n    forceReset && forceReset(reset);\n  }, [forceReset]);\n\n  function onSwipeNotMetSuccessThreshold() {\n    setDefaultWidth(defaultContainerWidth);\n    props.onSwipeFail && props.onSwipeFail();\n  }\n\n  function onSwipeMetSuccessThreshold(newWidth) {\n    if (newWidth !== maxWidth) {\n      finishRemainingSwipe();\n      return;\n    }\n\n    invokeOnSwipeSuccess();\n    reset();\n  }\n\n  function onPanResponderStart() {\n    if (props.disabled) {\n      return;\n    }\n\n    props.onSwipeStart && props.onSwipeStart();\n  }\n\n  function onPanResponderMove(event, gestureState) {\n    var reverseMultiplier, rtlMultiplier, newWidth;\n    return _regeneratorRuntime.async(function onPanResponderMove$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!props.disabled) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            reverseMultiplier = props.enableReverseSwipe ? -1 : 1;\n            rtlMultiplier = isRTL ? -1 : 1;\n            newWidth = defaultContainerWidth + rtlMultiplier * reverseMultiplier * gestureState.dx;\n\n            if (!(newWidth < defaultContainerWidth)) {\n              _context.next = 9;\n              break;\n            }\n\n            reset();\n            _context.next = 18;\n            break;\n\n          case 9:\n            if (!(newWidth > maxWidth)) {\n              _context.next = 14;\n              break;\n            }\n\n            setBackgroundColors();\n            setDefaultWidth(maxWidth);\n            _context.next = 18;\n            break;\n\n          case 14:\n            setBackgroundColors();\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(Animated.timing(animatedWidth, {\n              toValue: newWidth,\n              duration: 0,\n              useNativeDriver: false\n            }).start());\n\n          case 17:\n            setDefaultWidth(newWidth);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function onPanResponderRelease(event, gestureState) {\n    if (props.disabled) {\n      return;\n    }\n\n    var reverseMultiplier = props.enableReverseSwipe ? -1 : 1;\n    var rtlMultiplier = isRTL ? -1 : 1;\n    var newWidth = defaultContainerWidth + rtlMultiplier * reverseMultiplier * gestureState.dx;\n    var successThresholdWidth = maxWidth * (props.swipeSuccessThreshold / 100);\n    newWidth < successThresholdWidth ? onSwipeNotMetSuccessThreshold() : onSwipeMetSuccessThreshold(newWidth);\n  }\n\n  function setBackgroundColors() {\n    var railFillBackgroundColor = props.railFillBackgroundColor,\n        railFillBorderColor = props.railFillBorderColor;\n\n    if (backgroundColor === TRANSPARENT_COLOR) {\n      setBackgroundColor(railFillBackgroundColor);\n      setBorderColor(railFillBorderColor);\n    }\n  }\n\n  function finishRemainingSwipe() {\n    setDefaultWidth(maxWidth);\n    invokeOnSwipeSuccess();\n    var resetDelay = DEFAULT_ANIMATION_DURATION + (props.resetAfterSuccessAnimDelay !== undefined ? props.resetAfterSuccessAnimDelay : RESET_AFTER_SUCCESS_DEFAULT_DELAY);\n    setTimeout(function () {\n      props.shouldResetAfterSuccess && reset();\n    }, resetDelay);\n  }\n\n  function invokeOnSwipeSuccess() {\n    disableTouch(props.disableResetOnTap);\n    props.onSwipeSuccess && props.onSwipeSuccess();\n  }\n\n  function reset() {\n    disableTouch(false);\n    setDefaultWidth(defaultContainerWidth);\n\n    if (backgroundColor !== TRANSPARENT_COLOR) {\n      setBackgroundColor(TRANSPARENT_COLOR);\n      setBorderColor(TRANSPARENT_COLOR);\n    }\n  }\n\n  function renderThumbIcon() {\n    var disabled = props.disabled,\n        disabledThumbIconBackgroundColor = props.disabledThumbIconBackgroundColor,\n        disabledThumbIconBorderColor = props.disabledThumbIconBorderColor,\n        thumbIconBackgroundColor = props.thumbIconBackgroundColor,\n        thumbIconBorderColor = props.thumbIconBorderColor,\n        ThumbIconComponent = props.thumbIconComponent,\n        thumbIconHeight = props.thumbIconHeight,\n        thumbIconImageSource = props.thumbIconImageSource,\n        thumbIconStyles = props.thumbIconStyles,\n        thumbIconWidth = props.thumbIconWidth;\n    var iconWidth = 0;\n\n    if (thumbIconWidth == undefined) {\n      iconWidth = thumbIconHeight;\n    } else {\n      iconWidth = thumbIconWidth;\n    }\n\n    var dynamicStyles = _objectSpread(_objectSpread({}, thumbIconStyles), {}, {\n      height: thumbIconHeight,\n      width: iconWidth,\n      backgroundColor: disabled ? disabledThumbIconBackgroundColor : thumbIconBackgroundColor,\n      borderColor: disabled ? disabledThumbIconBorderColor : thumbIconBorderColor,\n      overflow: 'hidden'\n    });\n\n    return _jsxs(View, {\n      style: [styles.icon, _objectSpread({}, dynamicStyles)],\n      children: [!ThumbIconComponent && thumbIconImageSource && _jsx(Image, {\n        resizeMethod: \"resize\",\n        source: thumbIconImageSource\n      }), ThumbIconComponent && _jsx(View, {\n        children: _jsx(ThumbIconComponent, {})\n      })]\n    });\n  }\n\n  var disabled = props.disabled,\n      enableReverseSwipe = props.enableReverseSwipe,\n      onSwipeSuccess = props.onSwipeSuccess,\n      railStyles = props.railStyles,\n      screenReaderEnabled = props.screenReaderEnabled,\n      title = props.title;\n\n  var panStyle = _objectSpread(_objectSpread({\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    width: animatedWidth\n  }, enableReverseSwipe ? styles.containerRTL : styles.container), railStyles);\n\n  return _jsx(_Fragment, {\n    children: screenReaderEnabled ? _jsx(TouchableNativeFeedback, {\n      accessibilityLabel: title + \". \" + (disabled ? 'Disabled' : 'Double-tap to activate'),\n      disabled: disabled,\n      onPress: onSwipeSuccess,\n      accessible: true,\n      children: _jsx(View, {\n        style: [panStyle, {\n          width: defaultContainerWidth\n        }],\n        children: renderThumbIcon()\n      })\n    }) : _jsx(Animated.View, _objectSpread(_objectSpread({\n      style: [panStyle]\n    }, panResponder.panHandlers), {}, {\n      pointerEvents: shouldDisableTouch ? \"none\" : \"auto\",\n      children: renderThumbIcon()\n    }))\n  });\n};\n\nSwipeThumb.defaultProps = {\n  disabled: false,\n  layoutWidth: 0,\n  resetAfterSuccessAnimDuration: 200,\n  disableResetOnTap: false,\n  screenReaderEnabled: false,\n  thumbIconStyles: {}\n};\nSwipeThumb.propTypes = {\n  disabled: PropTypes.bool,\n  disableResetOnTap: PropTypes.bool,\n  disabledThumbIconBackgroundColor: PropTypes.string,\n  disabledThumbIconBorderColor: PropTypes.string,\n  enableReverseSwipe: PropTypes.bool,\n  forceReset: PropTypes.func,\n  layoutWidth: PropTypes.number,\n  onSwipeFail: PropTypes.func,\n  onSwipeStart: PropTypes.func,\n  onSwipeSuccess: PropTypes.func,\n  railFillBackgroundColor: PropTypes.string,\n  railFillBorderColor: PropTypes.string,\n  railStyles: PropTypes.object,\n  resetAfterSuccessAnimDuration: PropTypes.number,\n  screenReaderEnabled: PropTypes.bool,\n  shouldResetAfterSuccess: PropTypes.bool,\n  swipeSuccessThreshold: PropTypes.number,\n  thumbIconBackgroundColor: PropTypes.string,\n  thumbIconBorderColor: PropTypes.string,\n  thumbIconComponent: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),\n  thumbIconHeight: PropTypes.number,\n  thumbIconImageSource: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  thumbIconStyles: PropTypes.object,\n  thumbIconWidth: PropTypes.number,\n  title: PropTypes.string\n};\nexport default SwipeThumb;","map":{"version":3,"sources":["C:/Users/Damja/Documents/GitHub/rescueme/node_modules/rn-swipe-button/src/components/SwipeThumb/index.js"],"names":["React","useCallback","useState","useEffect","useRef","PropTypes","styles","borderWidth","margin","TRANSPARENT_COLOR","DEFAULT_ANIMATION_DURATION","RESET_AFTER_SUCCESS_DEFAULT_DELAY","SwipeThumb","props","paddingAndMarginsOffset","defaultContainerWidth","thumbIconWidth","undefined","thumbIconHeight","forceReset","maxWidth","layoutWidth","isRTL","I18nManager","animatedWidth","Animated","Value","current","defaultWidth","setDefaultWidth","shouldDisableTouch","disableTouch","backgroundColor","setBackgroundColor","borderColor","setBorderColor","panResponder","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onShouldBlockNativeResponder","onPanResponderStart","onPanResponderMove","onPanResponderRelease","timing","toValue","duration","useNativeDriver","start","reset","onSwipeNotMetSuccessThreshold","onSwipeFail","onSwipeMetSuccessThreshold","newWidth","finishRemainingSwipe","invokeOnSwipeSuccess","disabled","onSwipeStart","event","gestureState","reverseMultiplier","enableReverseSwipe","rtlMultiplier","dx","setBackgroundColors","successThresholdWidth","swipeSuccessThreshold","railFillBackgroundColor","railFillBorderColor","resetDelay","resetAfterSuccessAnimDelay","setTimeout","shouldResetAfterSuccess","disableResetOnTap","onSwipeSuccess","renderThumbIcon","disabledThumbIconBackgroundColor","disabledThumbIconBorderColor","thumbIconBackgroundColor","thumbIconBorderColor","ThumbIconComponent","thumbIconComponent","thumbIconImageSource","thumbIconStyles","iconWidth","dynamicStyles","height","width","overflow","icon","railStyles","screenReaderEnabled","title","panStyle","containerRTL","container","panHandlers","defaultProps","resetAfterSuccessAnimDuration","propTypes","bool","string","func","number","object","oneOfType","element","node"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { I18nManager } from 'react-native';\r\nimport {\r\n  Animated,\r\n  Image,\r\n  PanResponder,\r\n  TouchableNativeFeedback,\r\n  View,\r\n} from 'react-native';\r\n\r\n// Styles\r\nimport styles, { borderWidth, margin } from './styles';\r\n\r\n// Constants\r\nimport { TRANSPARENT_COLOR } from '../../constants';\r\nconst DEFAULT_ANIMATION_DURATION = 400;\r\nconst RESET_AFTER_SUCCESS_DEFAULT_DELAY = 1000;\r\n\r\nconst SwipeThumb = props => {\r\n  const paddingAndMarginsOffset = borderWidth + 2 * margin;\r\n  var defaultContainerWidth = 0\r\n  if (props.thumbIconWidth == undefined) { \r\n    defaultContainerWidth = props.thumbIconHeight \r\n  } else { \r\n    defaultContainerWidth = props.thumbIconWidth \r\n  }\r\n  const forceReset = props.forceReset;\r\n  const maxWidth = props.layoutWidth - paddingAndMarginsOffset;\r\n  const isRTL = I18nManager.isRTL;\r\n\r\n  const animatedWidth = useRef(new Animated.Value(defaultContainerWidth))\r\n    .current;\r\n  const [defaultWidth, setDefaultWidth] = useState(defaultContainerWidth);\r\n  const [shouldDisableTouch, disableTouch] = useState(false)\r\n\r\n  const [backgroundColor, setBackgroundColor] = useState(TRANSPARENT_COLOR);\r\n  const [borderColor, setBorderColor] = useState(TRANSPARENT_COLOR);\r\n\r\n  const panResponder = useCallback(\r\n    PanResponder.create({\r\n      onStartShouldSetPanResponder: () => true,\r\n      onStartShouldSetPanResponderCapture: () => true,\r\n      onMoveShouldSetPanResponder: () => true,\r\n      onMoveShouldSetPanResponderCapture: () => true,\r\n      onShouldBlockNativeResponder: () => true,\r\n      onPanResponderStart,\r\n      onPanResponderMove,\r\n      onPanResponderRelease,\r\n    }),\r\n    [props],\r\n  );\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animatedWidth, {\r\n      toValue: defaultWidth,\r\n      duration: 400,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  }, [animatedWidth, defaultWidth]);\r\n\r\n  useEffect(() => {\r\n    forceReset && forceReset(reset);\r\n  }, [forceReset]);\r\n\r\n  function onSwipeNotMetSuccessThreshold() {\r\n    // Animate to initial position\r\n    setDefaultWidth(defaultContainerWidth);\r\n    props.onSwipeFail && props.onSwipeFail();\r\n  }\r\n\r\n  function onSwipeMetSuccessThreshold(newWidth) {\r\n    if (newWidth !== maxWidth) {\r\n      finishRemainingSwipe();\r\n      return;\r\n    }\r\n    invokeOnSwipeSuccess()\r\n    reset();\r\n  }\r\n\r\n  function onPanResponderStart() {\r\n    if (props.disabled) {\r\n      return;\r\n    }\r\n    props.onSwipeStart && props.onSwipeStart();\r\n  }\r\n\r\n  async function onPanResponderMove(event, gestureState) {\r\n    if (props.disabled) {\r\n      return;\r\n    }\r\n    const reverseMultiplier = props.enableReverseSwipe ? -1 : 1;\r\n    const rtlMultiplier = isRTL ? -1 : 1;\r\n    const newWidth =\r\n      defaultContainerWidth +\r\n      rtlMultiplier * reverseMultiplier * gestureState.dx;\r\n    if (newWidth < defaultContainerWidth) {\r\n      // Reached starting position\r\n      reset();\r\n    } else if (newWidth > maxWidth) {\r\n      // Reached end position\r\n      setBackgroundColors();\r\n      setDefaultWidth(maxWidth);\r\n    } else {\r\n      setBackgroundColors();\r\n      await Animated.timing(animatedWidth, {\r\n        toValue: newWidth,\r\n        duration: 0,\r\n        useNativeDriver: false,\r\n      }).start();\r\n      setDefaultWidth(newWidth);\r\n    }\r\n  }\r\n\r\n  function onPanResponderRelease(event, gestureState) {\r\n    if (props.disabled) {\r\n      return;\r\n    }\r\n    const reverseMultiplier = props.enableReverseSwipe ? -1 : 1;\r\n    const rtlMultiplier = isRTL ? -1 : 1;\r\n    const newWidth =\r\n      defaultContainerWidth +\r\n      rtlMultiplier * reverseMultiplier * gestureState.dx;\r\n    const successThresholdWidth =\r\n      maxWidth * (props.swipeSuccessThreshold / 100);\r\n    newWidth < successThresholdWidth\r\n      ? onSwipeNotMetSuccessThreshold()\r\n      : onSwipeMetSuccessThreshold(newWidth);\r\n  }\r\n\r\n  function setBackgroundColors() {\r\n    const { railFillBackgroundColor, railFillBorderColor } = props;\r\n    // Set backgroundColor only if not already set\r\n    if (backgroundColor === TRANSPARENT_COLOR) {\r\n      setBackgroundColor(railFillBackgroundColor);\r\n      setBorderColor(railFillBorderColor);\r\n    }\r\n  }\r\n\r\n  function finishRemainingSwipe() {\r\n    // Animate to final position\r\n    setDefaultWidth(maxWidth);\r\n    invokeOnSwipeSuccess()\r\n\r\n    //Animate back to initial position after successfully swiped\r\n    const resetDelay =\r\n      DEFAULT_ANIMATION_DURATION +\r\n      (props.resetAfterSuccessAnimDelay !== undefined\r\n        ? props.resetAfterSuccessAnimDelay\r\n        : RESET_AFTER_SUCCESS_DEFAULT_DELAY);\r\n    setTimeout(() => {\r\n      props.shouldResetAfterSuccess && reset();\r\n    }, resetDelay);\r\n  }\r\n\r\n  function invokeOnSwipeSuccess() {\r\n    disableTouch(props.disableResetOnTap)\r\n    props.onSwipeSuccess && props.onSwipeSuccess();\r\n  }\r\n\r\n  function reset() {\r\n    disableTouch(false)\r\n    setDefaultWidth(defaultContainerWidth);\r\n\r\n    if (backgroundColor !== TRANSPARENT_COLOR) {\r\n      setBackgroundColor(TRANSPARENT_COLOR);\r\n      setBorderColor(TRANSPARENT_COLOR);\r\n    }\r\n  }\r\n\r\n  function renderThumbIcon() {\r\n    const {\r\n      disabled,\r\n      disabledThumbIconBackgroundColor,\r\n      disabledThumbIconBorderColor,\r\n      thumbIconBackgroundColor,\r\n      thumbIconBorderColor,\r\n      thumbIconComponent: ThumbIconComponent,\r\n      thumbIconHeight,\r\n      thumbIconImageSource,\r\n      thumbIconStyles,\r\n      thumbIconWidth,\r\n    } = props;\r\n    var iconWidth = 0\r\n    if (thumbIconWidth == undefined) {\r\n      iconWidth = thumbIconHeight\r\n    } else {\r\n      iconWidth = thumbIconWidth\r\n    }\r\n    const dynamicStyles = {\r\n      ...thumbIconStyles,\r\n      height: thumbIconHeight,\r\n      width: iconWidth,\r\n      backgroundColor: disabled\r\n        ? disabledThumbIconBackgroundColor\r\n        : thumbIconBackgroundColor,\r\n      borderColor: disabled\r\n        ? disabledThumbIconBorderColor\r\n        : thumbIconBorderColor,\r\n      overflow: 'hidden',\r\n    };\r\n\r\n    return (\r\n      <View style={[styles.icon, { ...dynamicStyles }]}>\r\n        {!ThumbIconComponent && thumbIconImageSource && (\r\n          <Image resizeMethod=\"resize\" source={thumbIconImageSource} />\r\n        )}\r\n        {ThumbIconComponent && (\r\n          <View>\r\n            <ThumbIconComponent />\r\n          </View>\r\n        )}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const {\r\n    disabled,\r\n    enableReverseSwipe,\r\n    onSwipeSuccess,\r\n    railStyles,\r\n    screenReaderEnabled,\r\n    title,\r\n  } = props;\r\n\r\n  const panStyle = {\r\n    backgroundColor,\r\n    borderColor,\r\n    width: animatedWidth,\r\n    ...(enableReverseSwipe ? styles.containerRTL : styles.container),\r\n    ...railStyles,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenReaderEnabled ? (\r\n        <TouchableNativeFeedback\r\n          accessibilityLabel={`${title}. ${\r\n            disabled ? 'Disabled' : 'Double-tap to activate'\r\n          }`}\r\n          disabled={disabled}\r\n          onPress={onSwipeSuccess}\r\n          accessible>\r\n          <View style={[panStyle, { width: defaultContainerWidth }]}>\r\n            {renderThumbIcon()}\r\n          </View>\r\n        </TouchableNativeFeedback>\r\n      ) : (\r\n        <Animated.View \r\n          style={[panStyle]} {...panResponder.panHandlers}\r\n          pointerEvents= {shouldDisableTouch ? \"none\" : \"auto\"}\r\n        >\r\n          {renderThumbIcon()}\r\n        </Animated.View>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nSwipeThumb.defaultProps = {\r\n  disabled: false,\r\n  layoutWidth: 0,\r\n  resetAfterSuccessAnimDuration: 200,\r\n  disableResetOnTap: false,\r\n  screenReaderEnabled: false,\r\n  thumbIconStyles: {},\r\n};\r\n\r\nSwipeThumb.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  disableResetOnTap: PropTypes.bool,\r\n  disabledThumbIconBackgroundColor: PropTypes.string,\r\n  disabledThumbIconBorderColor: PropTypes.string,\r\n  enableReverseSwipe: PropTypes.bool,\r\n  forceReset: PropTypes.func,\r\n  layoutWidth: PropTypes.number,\r\n  onSwipeFail: PropTypes.func,\r\n  onSwipeStart: PropTypes.func,\r\n  onSwipeSuccess: PropTypes.func,\r\n  railFillBackgroundColor: PropTypes.string,\r\n  railFillBorderColor: PropTypes.string,\r\n  railStyles: PropTypes.object,\r\n  resetAfterSuccessAnimDuration: PropTypes.number,\r\n  screenReaderEnabled: PropTypes.bool,\r\n  shouldResetAfterSuccess: PropTypes.bool,\r\n  swipeSuccessThreshold: PropTypes.number,\r\n  thumbIconBackgroundColor: PropTypes.string,\r\n  thumbIconBorderColor: PropTypes.string,\r\n  thumbIconComponent: PropTypes.oneOfType([\r\n    PropTypes.element,\r\n    PropTypes.node,\r\n    PropTypes.func,\r\n  ]),\r\n  thumbIconHeight: PropTypes.number,\r\n  thumbIconImageSource: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]),\r\n  thumbIconStyles: PropTypes.object,\r\n  thumbIconWidth: PropTypes.number,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default SwipeThumb;\r\n"]},"metadata":{},"sourceType":"module"}