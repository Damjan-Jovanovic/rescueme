{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { UnavailabilityError, Platform } from 'expo-modules-core';\nimport ExpoSMS from \"./ExpoSMS\";\n\nfunction processAttachments(attachments) {\n  if (!attachments) {\n    return null;\n  }\n\n  attachments = Array.isArray(attachments) ? attachments : [attachments];\n\n  if (Platform.OS === 'android' && attachments.length > 1) {\n    if (__DEV__) {\n      console.warn('Android only supports a single attachment. The first array item is used.');\n    }\n\n    attachments = attachments.slice(0, 1);\n  }\n\n  return attachments;\n}\n\nexport function sendSMSAsync(addresses, message, options) {\n  var finalAddresses, finalOptions;\n  return _regeneratorRuntime.async(function sendSMSAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoSMS.sendSMSAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n\n        case 2:\n          finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n          finalAddresses.forEach(function (address) {\n            if (address === null || address === undefined) {\n              throw new TypeError('undefined or null address');\n            }\n          });\n          finalOptions = _objectSpread({}, options);\n\n          if (options != null && options.attachments) {\n            finalOptions.attachments = processAttachments(options == null ? void 0 : options.attachments) || undefined;\n          }\n\n          return _context.abrupt(\"return\", ExpoSMS.sendSMSAsync(finalAddresses, message, finalOptions));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", ExpoSMS.isAvailableAsync());\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/SMS.ts"],"names":[],"mappings":";;;;;;;AACA,SAAS,mBAAT,EAA8B,QAA9B,QAA8C,mBAA9C;AAEA,OAAO,OAAP;;AAKA,SAAS,kBAAT,CACE,WADF,EAC0D;AAExD,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,EAAA,WAAW,GAAG,KAAK,CAAC,OAAN,CAAc,WAAd,IAA6B,WAA7B,GAA2C,CAAC,WAAD,CAAzD;;AACA,MAAI,QAAQ,CAAC,EAAT,KAAgB,SAAhB,IAA6B,WAAW,CAAC,MAAZ,GAAqB,CAAtD,EAAyD;AACvD,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,IAAR,CAAa,0EAAb;AACD;;AACD,IAAA,WAAW,GAAG,WAAW,CAAC,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AACD;;AACD,SAAO,WAAP;AACD;;AAqCD,OAAO,SAAe,YAAf,CACL,SADK,EAEL,OAFK,EAGL,OAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAKA,OAAO,CAAC,YALR;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,cAApC,CANH;;AAAA;AAQC,UAAA,cARD,GAQkB,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,SAA3B,GAAuC,CAAC,SAAD,CARzD;AASL,UAAA,cAAc,CAAC,OAAf,CAAuB,UAAC,OAAD,EAAY;AACjC,gBAAI,OAAO,KAAK,IAAZ,IAAoB,OAAO,KAAK,SAApC,EAA+C;AAC7C,oBAAM,IAAI,SAAJ,CAAc,2BAAd,CAAN;AACD;AACF,WAJD;AAKM,UAAA,YAdD,qBAeA,OAfA;;AAiBL,cAAI,OAAJ,YAAI,OAAO,CAAE,WAAb,EAA0B;AACxB,YAAA,YAAY,CAAC,WAAb,GAA2B,kBAAkB,CAAC,OAAD,oBAAC,OAAO,CAAE,WAAV,CAAlB,IAA4C,SAAvE;AACD;;AAnBI,2CAoBE,OAAO,CAAC,YAAR,CAAqB,cAArB,EAAqC,OAArC,EAA8C,YAA9C,CApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCP,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,OAAO,CAAC,gBAAR,EADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport ExpoSMS from './ExpoSMS';\nimport { SMSAttachment, SMSResponse, SMSOptions } from './SMS.types';\n\nexport { SMSAttachment, SMSResponse, SMSOptions };\n\nfunction processAttachments(\n  attachments: SMSAttachment | SMSAttachment[] | undefined\n): SMSAttachment[] | null {\n  if (!attachments) {\n    return null;\n  }\n  attachments = Array.isArray(attachments) ? attachments : [attachments];\n  if (Platform.OS === 'android' && attachments.length > 1) {\n    if (__DEV__) {\n      console.warn('Android only supports a single attachment. The first array item is used.');\n    }\n    attachments = attachments.slice(0, 1);\n  }\n  return attachments;\n}\n\n// @needsAudit\n/**\n * Opens the default UI/app for sending SMS messages with prefilled addresses and message.\n *\n * @param addresses An array of addresses (phone numbers) or single address passed as strings. Those\n * would appear as recipients of the prepared message.\n * @param message Message to be sent.\n * @param options A `SMSOptions` object defining additional SMS configuration options.\n *\n * @return Returns a Promise that fulfils with the SMS action is invoked by the user, with corresponding result:\n * - If the user cancelled the SMS sending process: `{ result: 'cancelled' }`.\n * - If the user has sent/scheduled message for sending: `{ result: 'sent' }`.\n * - If the status of the SMS message cannot be determined: `{ result: 'unknown' }`.\n *\n * Android does not provide information about the status of the SMS message, so on Android devices\n * the Promise will always resolve with { result: 'unknown' }.\n *\n * > Note: The only feedback collected by this module is whether any message has been sent. That\n * means we do not check actual content of message nor recipients list.\n *\n * @example\n * ```ts\n * const { result } = await SMS.sendSMSAsync(\n *   ['0123456789', '9876543210'],\n *   'My sample HelloWorld message',\n *   {\n *     attachments: {\n *       uri: 'path/myfile.png',\n *       mimeType: 'image/png',\n *       filename: 'myfile.png',\n *     },\n *   }\n * );\n * ```\n */\nexport async function sendSMSAsync(\n  addresses: string | string[],\n  message: string,\n  options?: SMSOptions\n): Promise<SMSResponse> {\n  if (!ExpoSMS.sendSMSAsync) {\n    throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n  }\n  const finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n  finalAddresses.forEach((address) => {\n    if (address === null || address === undefined) {\n      throw new TypeError('undefined or null address');\n    }\n  });\n  const finalOptions = {\n    ...options,\n  } as SMSOptions;\n  if (options?.attachments) {\n    finalOptions.attachments = processAttachments(options?.attachments) || undefined;\n  }\n  return ExpoSMS.sendSMSAsync(finalAddresses, message, finalOptions);\n}\n\n// @needsAudit\n/**\n * Determines whether SMS is available. Always returns `false` in the iOS simulator, and in browser.\n *\n * @return Returns a promise that fulfils with a `boolean`, indicating whether SMS is available on this device.\n *\n * @example\n * ```ts\n * const isAvailable = await SMS.isAvailableAsync();\n * if (isAvailable) {\n *   // do your SMS stuff here\n * } else {\n *   // misfortune... there's no SMS available on this device\n * }\n * ```\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return ExpoSMS.isAvailableAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}